import streamlit as st
import numpy as np
from tensorflow.keras.models import load_model
import os
import gdown
from tensorflow.keras.models import load_model

# тЬЕ Path where model will be saved after download
model_path = "plant_disease_model.h5"

# тЬЕ Download only if file doesn't exist
if not os.path.exists(model_path):
    gdown.download(
        "https://drive.google.com/uc?id=12a3xflejJSxzr_06jkFOey36R2it7aIy",
        model_path,
        quiet=False
    )

# тЬЕ Load the model
model = load_model(model_path)


# тЬЕ Correct class label order based on training
class_labels = ['Pepper___Bacterial_spot', 'Tomato___Healthy', 'Tomato___Late_blight']  # Ensure this matches training order

# ЁЯФ╣ Language-based medicine dictionary
medicine_dict = {
    "English": {
        "Tomato___Late_blight": "Spray with fungicides like Captan or Mancozeb.",
        "Tomato___Healthy": "The plant is healthy. No medicine required.",
        "Pepper___Bacterial_spot": "Spray with copper spray or streptomycin."
    },
    "Hindi": {
        "Tomato___Late_blight": "рдХрдкреНрддрд╛рди рдпрд╛ рдореИрдирдХреЛрдЬреЗрдм рдЬреИрд╕реЗ рдлрдлреВрдВрджрдирд╛рд╢рдХреЛрдВ рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВред",
        "Tomato___Healthy": "рдкреМрдзрд╛ рд╕реНрд╡рд╛рд╕реНрде рд╣реИ, рдХрд┐рд╕реА рджрд╡рд╛ рдХреА рдЖрд╡рд╢реНрдпрдХреНрддрд╛ рдирд╣реАрдВ рд╣реИред",
        "Pepper___Bacterial_spot": "рдХреЙрдкрд░ рд╕реНрдкреНрд░реЗ рдпрд╛ рд╕реНрдЯреНрд░реЗрдкреНрдЯреЛрдорд╛рдпрд╕рд┐рди рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВред"
    }
}

# ЁЯФ╣ Language selector
language = st.selectbox("ЁЯМР Choose Language / рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ", ["English", "Hindi"])

# ЁЯФ╣ UI headings
if language == "English":
    st.title("ЁЯМ┐ AI Farmer Helper")
    st.markdown("Upload a crop leaf image to detect disease and get treatment.")
else:
    st.title("ЁЯМ┐ рдПрдЖрдИ рдХрд┐рд╕рд╛рди рд╕рд╣рд╛рдпрдХ")
    st.markdown("рдлрд╕рд▓ рдХреА рдкрддреНрддреА рдХреА рддрд╕реНрд╡реАрд░ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ рдФрд░ рдмреАрдорд╛рд░реА рдХреА рдкрд╣рдЪрд╛рди рдХрд░реЗрдВред")

# ЁЯФ╣ File uploader
uploaded_file = st.file_uploader("ЁЯУ╖ Upload Leaf Image", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    st.image(uploaded_file, caption="ЁЯУ╕", use_column_width=True)

    if st.button("ЁЯФН Detect Disease" if language == "English" else "ЁЯФН рдмреАрдорд╛рд░реА рдХреА рдкрд╣рдЪрд╛рди рдХрд░реЗрдВ"):
        # Load and preprocess image
        img = image.load_img(uploaded_file, target_size=(128, 128))
        img_array = image.img_to_array(img) / 255.0
        img_array = np.expand_dims(img_array, axis=0)

        # Prediction
        prediction = model.predict(img_array)
        class_index = np.argmax(prediction[0])
        disease = class_labels[class_index]
        confidence = round(np.max(prediction[0]) * 100, 2)

        # Medicine
        medicine = medicine_dict[language].get(
            disease, 
            "No treatment info available." if language == "English" else "рдЗрд▓рд╛рдЬ рдХреА рдЬрд╛рдирдХрд╛рд░реА рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред"
        )

        # Output
        st.success(f"ЁЯжа Disease: {disease}" if language == "English" else f"ЁЯжа рдмреАрдорд╛рд░реА: {disease}")
        st.info(f"ЁЯТК Treatment: {medicine}" if language == "English" else f"ЁЯТК рдЙрдкрдЪрд╛рд░: {medicine}")
        st.caption(f"ЁЯФО Confidence: {confidence}%")
